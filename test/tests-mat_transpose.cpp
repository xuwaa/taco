#include "test.h"
#include "test_tensors.h"

#include "taco/tensor.h"
#include "taco/storage/storage.h"
#include "taco/matrix_transpose.h"

using namespace taco;

namespace mat_transpose_tests
{

typedef int IndexType;
typedef std::vector<IndexType> IndexArray; // Index values
typedef std::vector<IndexArray> Index;     // [0,2] index arrays per Index
typedef std::vector<Index> Indices;        // One Index per level

IndexVar i("i"), j("j"), m("m"), n("n"), k("k"), l("l");

struct TestData
{
    TestData(Tensor<double> tensorA, Tensor<double> tensorB, Indices expectedIndices,
             vector<double> expectedValues)
        : tensorA(tensorA),
          tensorB(tensorB), expectedIndices(expectedIndices), expectedValues(expectedValues)
    {
    }

    Tensor<double> tensorA;
    Tensor<double> tensorB;
    Indices expectedIndices;
    vector<double> expectedValues;
};

struct transpose2 : public TestWithParam<TestData>
{
};

// Taken from tensor.cpp
void unpack(Tensor<double> tensorA, taco_tensor_t *A)
{
    vector<ModeIndex> modeIndices;
    TensorStorage storage = tensorA.getStorage();
    Format format = storage.getFormat();

    size_t num = 1;
    for (int i = 0; i < storage.getOrder(); i++)
    {
        ModeFormat modeType = format.getModeFormats()[i];
        if (modeType == Dense)
        {
            Array size = makeArray({*(int *)A->indices[i][0]});
            modeIndices.push_back(ModeIndex({size}));
            num *= ((int *)A->indices[i][0])[0];
        }
        else if (modeType == Sparse)
        {
            auto size = ((int *)A->indices[i][0])[num];
            Array pos = Array(type<int>(), A->indices[i][0], num + 1, Array::UserOwns);
            Array idx = Array(type<int>(), A->indices[i][1], size, Array::UserOwns);
            modeIndices.push_back(ModeIndex({pos, idx}));
            num = size;
        }
        else
        {
            taco_not_supported_yet;
        }
    }
    storage.setIndex(taco::Index(format, modeIndices));
    storage.setValues(Array(storage.getComponentType(), A->vals, num));
}

typedef int (*TransposeFunctions)(taco_tensor_t *A, taco_tensor_t *B);

TEST_P(transpose2, reorder)
{
    int num_transpose_functions = 1;
    TransposeFunctions functions[] =
        {
            taco::mat_csr_transpose_halfperm,
            //taco::mat_csr_transpose_qsort
            };

    Tensor<double> tensorA = GetParam().tensorA;
    Tensor<double> tensorB = GetParam().tensorB;
    tensorB.pack();
    auto &expectedIndices = GetParam().expectedIndices;
    auto &expectedValues = GetParam().expectedValues;

    for (int i = 0; i < num_transpose_functions; i++)
    {
        taco_tensor_t *A = (taco_tensor_t *)tensorA.getTacoTensorT();
        taco_tensor_t *B = (taco_tensor_t *)tensorB.getTacoTensorT();
        functions[i](A, B);
        unpack(tensorA, A);

        ASSERT_COMPONENTS_EQUALS(expectedIndices, expectedValues, tensorA);
    }
}

// CSR to CSR
INSTANTIATE_TEST_CASE_P(matrix_mul, transpose2,
                        Values(
                            TestData(Tensor<double>("A", {5, 3}, Format({Dense, Sparse})),
                                     d35a("B", Format({Dense, Sparse})),
                                     {
                                         {
                                            {5}
                                         },
                                        {
                                            {0, 2, 3, 3, 4, 4},
                                            {0, 2, 0, 2}
                                        }
                                     },
                                     {2, 3, 4, 5}
                            ),
                            TestData(Tensor<double>("A", {10, 3}, Format({Dense, Sparse})),
                                     readTestTensor("d3_10.tns",Format({Dense, Sparse})),
                                    {
                                        {
                                            {10}
                                        },
                                        {
                                            {0, 1, 1, 2, 2, 2, 3, 3, 4, 5, 6},
                                            {1, 1, 1, 2, 2, 2},
                                        },
                                    },
                                    {2.0, 3.0, 4.0, 5.0, 6.0, 7.0}
                            )
                        )

);

INSTANTIATE_TEST_CASE_P(matrix_mul_medium, transpose2,
                        Values(
                            TestData(Tensor<double>("A", {40, 75}, Format({Dense, Sparse})),
                                     readTestTensor("d75_40.tns",Format({Dense, Sparse})),
                                    {
                                        {
                                            {40}
                                        },
                                        {
                                            {0, 10, 19, 32, 51, 63, 74, 87, 94, 112, 135, 147, 165, 176, 192, 205, 221, 236, 248, 260, 272, 284, 307, 316, 324, 343, 358, 368, 385, 398, 410, 422, 437, 447, 460, 474, 489, 500, 515, 530, 547},
                                            {15, 20, 23, 25, 26, 30, 31, 33, 35, 36, 2, 9, 13, 15, 20, 32, 38, 46, 65, 2, 4, 5, 14, 18, 21, 24, 32, 38, 44, 51, 65, 66, 1, 2, 9, 19, 26, 29, 30, 33, 34, 39, 48, 56, 61, 63, 66, 69, 70, 71, 74, 0, 23, 25, 30, 39, 45, 47, 54, 60, 66, 72, 74, 1, 15, 18, 21, 44, 47, 48, 49, 56, 63, 72, 3, 19, 24, 26, 33, 40, 44, 46, 50, 54, 58, 64, 65, 0, 10, 17, 19, 20, 23, 24, 6, 7, 10, 15, 20, 23, 28, 30, 35, 36, 38, 47, 57, 59, 62, 63, 66, 72, 0, 1, 5, 9, 10, 29, 30, 32, 34, 35, 37, 38, 40, 41, 43, 44, 50, 59, 61, 66, 70, 72, 73, 0, 6, 20, 27, 28, 30, 34, 43, 44, 59, 65, 69, 3, 4, 16, 28, 32, 33, 46, 47, 48, 53, 58, 60, 63, 65, 66, 69, 72, 73, 9, 11, 18, 22, 26, 30, 31, 44, 53, 59, 69, 3, 5, 8, 11, 23, 24, 29, 32, 40, 42, 54, 60, 64, 72, 73, 74, 2, 3, 8, 10, 13, 24, 27, 30, 43, 51, 63, 64, 74, 0, 6, 22, 32, 33, 37, 38, 41, 42, 44, 55, 57, 58, 59, 64, 66, 1, 4, 20, 22, 23, 25, 27, 28, 30, 36, 38, 58, 61, 64, 68, 5, 7, 9, 13, 21, 29, 38, 42, 52, 61, 70, 72, 0, 10, 14, 15, 17, 20, 29, 32, 35, 50, 55, 73, 0, 10, 13, 15, 29, 37, 48, 51, 53, 59, 70, 72, 0, 9, 11, 33, 39, 44, 45, 46, 47, 65, 68, 70, 0, 2, 6, 8, 12, 14, 29, 30, 32, 37, 38, 46, 51, 53, 54, 55, 61, 62, 63, 64, 65, 73, 74, 15, 18, 19, 28, 29, 46, 47, 57, 62, 3, 9, 10, 12, 19, 24, 37, 55, 5, 6, 7, 8, 17, 19, 22, 38, 43, 46, 47, 50, 53, 56, 57, 59, 61, 62, 74, 7, 11, 13, 16, 17, 25, 28, 33, 35, 39, 46, 49, 57, 65, 73, 4, 23, 24, 28, 34, 35, 50, 53, 58, 67, 2, 6, 10, 22, 23, 29, 35, 40, 49, 50, 53, 58, 64, 65, 66, 67, 74, 7, 9, 10, 21, 22, 53, 58, 60, 65, 67, 68, 69, 70, 1, 11, 15, 20, 32, 35, 38, 46, 51, 54, 59, 63, 2, 5, 6, 10, 14, 21, 24, 27, 34, 37, 52, 53, 3, 10, 13, 18, 20, 22, 31, 34, 57, 62, 67, 68, 70, 72, 73, 20, 24, 32, 41, 44, 51, 52, 64, 65, 70, 8, 12, 13, 18, 25, 27, 45, 48, 59, 62, 64, 65, 74, 1, 4, 15, 23, 28, 39, 42, 43, 47, 50, 53, 59, 63, 64, 9, 13, 17, 19, 25, 30, 35, 40, 46, 49, 52, 53, 54, 57, 64, 6, 17, 25, 32, 35, 38, 54, 58, 68, 72, 74, 0, 14, 19, 26, 32, 43, 47, 51, 53, 54, 55, 56, 57, 69, 74, 4, 11, 21, 27, 28, 30, 49, 52, 53, 55, 57, 58, 61, 71, 73, 2, 3, 6, 7, 15, 18, 23, 24, 27, 29, 36, 41, 42, 46, 57, 60, 65},
                                        },
                                    },
                                    {121.0, 155.0, 179.0, 204.0, 213.0, 244.0, 257.0, 274.0, 288.0, 298.0, 21.0, 75.0, 107.0, 122.0, 156.0, 260.0, 309.0, 361.0, 524.0, 22.0, 38.0, 45.0, 115.0, 140.0, 166.0, 192.0, 261.0, 310.0, 349.0, 401.0, 525.0, 538.0, 13.0, 23.0, 76.0, 147.0, 214.0, 234.0, 245.0, 275.0, 282.0, 321.0, 382.0, 447.0, 490.0, 504.0, 539.0, 555.0, 563.0, 572.0, 592.0, 2.0, 180.0, 206.0, 246.0, 322.0, 358.0, 372.0, 432.0, 485.0, 540.0, 574.0, 593.0, 15.0, 123.0, 141.0, 167.0, 350.0, 373.0, 383.0, 389.0, 449.0, 505.0, 575.0, 30.0, 148.0, 193.0, 215.0, 277.0, 326.0, 351.0, 362.0, 394.0, 433.0, 464.0, 513.0, 526.0, 3.0, 84.0, 134.0, 149.0, 157.0, 181.0, 194.0, 52.0, 62.0, 85.0, 124.0, 158.0, 182.0, 225.0, 247.0, 289.0, 299.0, 311.0, 375.0, 453.0, 474.0, 498.0, 506.0, 541.0, 576.0, 5.0, 16.0, 47.0, 77.0, 86.0, 235.0, 248.0, 262.0, 283.0, 290.0, 302.0, 312.0, 327.0, 332.0, 342.0, 352.0, 395.0, 475.0, 491.0, 542.0, 564.0, 577.0, 584.0, 6.0, 53.0, 159.0, 218.0, 226.0, 250.0, 284.0, 344.0, 353.0, 477.0, 527.0, 556.0, 31.0, 39.0, 132.0, 227.0, 263.0, 278.0, 363.0, 376.0, 386.0, 415.0, 466.0, 486.0, 507.0, 528.0, 543.0, 557.0, 578.0, 585.0, 78.0, 96.0, 142.0, 172.0, 216.0, 251.0, 258.0, 354.0, 416.0, 478.0, 558.0, 32.0, 48.0, 69.0, 97.0, 184.0, 195.0, 236.0, 264.0, 329.0, 337.0, 434.0, 487.0, 514.0, 579.0, 586.0, 594.0, 25.0, 33.0, 70.0, 87.0, 108.0, 196.0, 219.0, 252.0, 345.0, 402.0, 508.0, 515.0, 595.0, 7.0, 54.0, 173.0, 265.0, 279.0, 303.0, 314.0, 333.0, 338.0, 355.0, 440.0, 454.0, 467.0, 479.0, 516.0, 544.0, 17.0, 40.0, 160.0, 174.0, 185.0, 208.0, 220.0, 228.0, 253.0, 300.0, 315.0, 468.0, 492.0, 517.0, 550.0, 49.0, 63.0, 79.0, 109.0, 168.0, 237.0, 316.0, 339.0, 410.0, 493.0, 565.0, 580.0, 8.0, 89.0, 116.0, 126.0, 135.0, 162.0, 238.0, 266.0, 291.0, 396.0, 441.0, 587.0, 9.0, 90.0, 110.0, 127.0, 239.0, 304.0, 387.0, 404.0, 419.0, 480.0, 567.0, 581.0, 10.0, 80.0, 98.0, 280.0, 323.0, 356.0, 359.0, 364.0, 377.0, 529.0, 551.0, 568.0, 11.0, 26.0, 55.0, 72.0, 104.0, 117.0, 240.0, 254.0, 267.0, 305.0, 317.0, 365.0, 405.0, 421.0, 435.0, 442.0, 494.0, 499.0, 510.0, 518.0, 530.0, 588.0, 596.0, 128.0, 143.0, 150.0, 229.0, 241.0, 366.0, 378.0, 455.0, 500.0, 34.0, 81.0, 91.0, 105.0, 151.0, 197.0, 307.0, 444.0, 50.0, 56.0, 64.0, 73.0, 136.0, 152.0, 175.0, 318.0, 346.0, 367.0, 379.0, 397.0, 422.0, 450.0, 456.0, 481.0, 496.0, 501.0, 597.0, 65.0, 99.0, 111.0, 133.0, 137.0, 209.0, 230.0, 281.0, 292.0, 324.0, 368.0, 390.0, 457.0, 531.0, 589.0, 41.0, 186.0, 198.0, 231.0, 285.0, 293.0, 398.0, 423.0, 469.0, 546.0, 27.0, 58.0, 92.0, 176.0, 187.0, 242.0, 294.0, 330.0, 391.0, 399.0, 424.0, 470.0, 519.0, 532.0, 545.0, 547.0, 598.0, 67.0, 82.0, 93.0, 169.0, 177.0, 425.0, 471.0, 488.0, 533.0, 548.0, 552.0, 559.0, 569.0, 18.0, 100.0, 129.0, 163.0, 269.0, 295.0, 319.0, 369.0, 406.0, 436.0, 482.0, 511.0, 28.0, 51.0, 59.0, 94.0, 118.0, 170.0, 199.0, 221.0, 286.0, 308.0, 411.0, 426.0, 35.0, 95.0, 112.0, 144.0, 164.0, 178.0, 259.0, 287.0, 458.0, 502.0, 549.0, 553.0, 570.0, 582.0, 590.0, 165.0, 201.0, 270.0, 334.0, 357.0, 407.0, 412.0, 520.0, 534.0, 571.0, 74.0, 106.0, 113.0, 145.0, 210.0, 222.0, 360.0, 388.0, 483.0, 503.0, 521.0, 536.0, 599.0, 19.0, 42.0, 130.0, 189.0, 232.0, 325.0, 340.0, 347.0, 380.0, 400.0, 427.0, 484.0, 512.0, 522.0, 83.0, 114.0, 138.0, 153.0, 211.0, 255.0, 296.0, 331.0, 370.0, 392.0, 413.0, 428.0, 437.0, 460.0, 523.0, 60.0, 139.0, 212.0, 272.0, 297.0, 320.0, 438.0, 472.0, 554.0, 583.0, 600.0, 12.0, 119.0, 154.0, 217.0, 273.0, 348.0, 381.0, 408.0, 430.0, 439.0, 445.0, 452.0, 461.0, 562.0, 601.0, 43.0, 102.0, 171.0, 223.0, 233.0, 256.0, 393.0, 414.0, 431.0, 446.0, 462.0, 473.0, 497.0, 573.0, 591.0, 29.0, 36.0, 61.0, 68.0, 131.0, 146.0, 190.0, 203.0, 224.0, 243.0, 301.0, 335.0, 341.0, 371.0, 463.0, 489.0, 537.0}

                            )
                        )

);


} // namespace mat_transpose_tests